{"name":"kebno.github.io","tagline":"Knowledge to know.","body":"# A Collection of Code Snippets I Occasionally Need\r\n\r\n\r\n## Getting Started With Complex Math in C.\r\n\r\nComplex math is supported by C99.  The following code example\r\ndemonstrates a simple use of complex functions provided by C99.\r\n\r\n    :::C\r\n    #include <stdio.h>\r\n    #include <complex.h>\r\n\r\n    int main (void)\r\n    {\r\n        double complex z1 = 1.0 + 3.0 * I;\r\n        double complex z2 = 1.0 - 4.0 * I;\r\n\r\n        printf(\"Working with complex numbers:\\n\\v\");\r\n\r\n        printf(\"Starting values: Z1 = %.2f + %.2fi\\tZ2 = %.2f %+.2fi\\n\", creal(z1), cimag(z1), creal(z2), cimag(z2));\r\n\r\n        double complex sum = z1 + z2;\r\n        printf(\"The sum: Z1 + Z2 = %.2f %+.2fi\\n\", creal(sum), cimag(sum));\r\n\r\n        double complex difference = z1 - z2;\r\n        printf(\"The difference: Z1 - Z2 = %.2f %+.2fi\\n\", creal(difference), cimag(difference));\r\n\r\n        double complex product = z1 * z2;\r\n        printf(\"The product: Z1 x Z2 = %.2f %+.2fi\\n\", creal(product), cimag(product));\r\n\r\n        double complex quotient = z1 / z2;\r\n        printf(\"The quotient: Z1 / Z2 = %.2f %+.2fi\\n\", creal(quotient), cimag(quotient));\r\n\r\n        double complex squareroot = csqrt(z1);\r\n        printf(\"The conjugate of Z1 = %.2f %+.2fi\\n\", creal(squareroot), cimag(squareroot));\r\n\r\n        return 0;\r\n    }\r\n\r\n\r\nCompile/Link this with the following command\r\n\r\n`gcc -std=c99 -o example example.c -lm`\r\n\r\nThe option flag `-lm` tells gcc to include the math libraries (this is\r\ndone by default for `stdio.h` for example, but not maths).\r\n\r\n## Making a Time-Lapse Movie in Linux\r\n\r\nCapture a sequence of images with your webcam.\r\n\r\nIf you are like me, you might have used a timestamp for the image\r\nnames. If so, you will need to rename all of them to have a name\r\nfollowed by an uninterrupted sequence of numbers (hi00.jpg, hi01.jpg,\r\nhi02.jpg,...).  To avoid the trouble of renaming every file and\r\nthereby losing the timestamps, you may create symbolic links to the\r\nfiles.  The following bash script will do just that, output a sequence\r\nof files in chronological order and create links for them within the\r\n`/tmp` directory of your system. Then the video encoder will accept\r\nthe sequence of links and make a movie (it doesn't need to know they\r\npoint to files with timestamps in the filename...). Change the video\r\noutput format to suit your fancy.\r\n\r\nFrom within the directory of the images, run the following:\r\n\r\n    :::bash\r\n    x=1;\r\n    for i in *.jpg*; # extra * for syntax highlight problems in editor\r\n    do counter=$(printf %03d $x);\r\n    ln /pathtoimages/\"$i\" /tmp/img\"$counter\".jpg -s; x=$(($x+1));\r\n    done\r\n\r\n    avconv -i /tmp/img%03d.jpg -vcodec mpeg4 test.avi\r\n\r\nIf you plan to do this with different sets of files, you must delete\r\n    the links within `/tmp` before creating new links.\r\n\r\n## Averaging a Sequence of Images\r\n\r\nThere are many ways to accomplish this. One way is to use the Python\r\nImage Library. The key command in this process is `Image.blend(image1,\r\nimage2, alpha)`.\r\n\r\nAnother is to properly set the alpha value to simulate a straight\r\naverage of ALL images together.\r\n\r\nA summary of these two ideas follows:\r\n\r\n    :::python\r\n    Image.blend(previm, currim, alpha)\r\n    alpha = 0.5 / num_images\r\n\r\n## Setup SSH on LAN\r\n\r\n1. Install openssh-server on your system unless it is already installed.\r\n1. If you are on an Ubuntu based distro, install Uncomplicated Firewall (ufw).\r\n1. Open the SSH port: `sudo ufw allow ssh`\r\n1. Make a backup of your sshd_config file:\r\n\r\n        sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.original\r\n        sudo chmod a-w /etc/ssh/sshd_config.original\r\n\r\n1. Create an authorized keys file and set correct permissions for it:\r\n\r\n        touch ~/.ssh/authorized_keys\r\n        chmod 0700 ~/.ssh/\r\n        chmod 0600 ~/.ssh/authorized_keys\r\n\r\n\r\n## Uncomplicated Firewall (ufw) Setup and Vino (VNC)\r\n\r\n1. Install ufw.\r\n1. Enable it:\r\n> `sudo ufw enable`\r\n1. Open port 22 for any protocal to a specific IP address:\r\n> `sudo ufw allow from 192.168.1.100 to any port 22`\r\n1. Install vino.\r\n1. Run `sudo vino-preferences`.\r\n1. Start vino-server: `/usr/lib/vino/vino-server &`\r\n1. Check to make sure it is running and listening on port 5900:\r\n> `netstat -nl | grep 5900`\r\n1. To permit only local connections (Ubuntu 11.10 and newer):\r\n> `gsettings set org.gnome.Vino network-interface lo`\r\n1. To permit connections from anywhere (Ubuntu 11.10 and newer):\r\n> `gsettings reset org.gnome.Vino network-interface`\r\n1. On the remote machine, forward port 5900 on the vino-server\r\nmachine to your port 5900:\r\n> `ssh -L 5900:localhost:5900 user@remotebox`\r\n\r\n## Adding a global .gitignore File\r\n(Pulled from the Github docs)\r\n\r\n1. Create the file `~/.gitignore_global` and add some rules to it.\r\n1. To add this to your config, run\r\n> `git config --global core.excludesfile ~/.gitignore_global`\r\n\r\n## Per-repo Git Settings\r\n(from the Github help docs)\r\n\r\n    $ cd my_other_repo\r\n    # Changes the working directory to the repo you need to switch info for\r\n    $ git config user.name \"Different Name\"\r\n    # Sets the user's name for this specific repo\r\n    $ git config user.email \"differentemail@email.com\"\r\n    # Sets the user's email for this specific repo\r\n\r\n## Internet Radio Streams with Mplayer\r\n\r\n    mplayer -playlist kmusic.m3u\r\n\r\n## Git Branching (Git Pro Book, by Scott Chacon)\r\n\r\n    # Create branch pointer\r\n    git branch testing\r\n    # Switch to the 'testing' branch\r\n    git checkout testing\r\n\r\n    # Create branch and switch to it\r\n    git checkout -b iss53\r\n    # Switch back to master branch\r\n    git checkout master\r\n\r\n    # Create another branch and switch to it\r\n    git checkout -b hotfix\r\n    # Make changes and commits\r\n    # Go back to master\r\n    git checkout master\r\n    # Merge hotfix back into master\r\n    git merge hotfix\r\n    # Now you may delete the hotfix branch/pointer (it's redundant now)\r\n    git branch -d hotfix\r\n\r\n    # Go back to iss53\r\n    git checkout iss53\r\n    # If you needed the changes now in master in iss53, merge master into it\r\n    git merge master\r\n    # When finished with iss53, go back to master and merge in iss53\r\n    git checkout master\r\n    git merge iss53\r\n    # Cleanup\r\n    git branch -d iss53\r\n\r\n## Branch Management\r\n\r\n    # display branches\r\n    git branch\r\n    # show last commit on each branch\r\n    git branch -v\r\n    # show branches already merged into current branch\r\n    git branch --merged\r\n    # show branches not yet merged into current branch\r\n    git branch --no-merged\r\n\r\n## Remote references\r\n\r\n    # Update remote references\r\n    git fetch origin\r\n\r\n## Check for iMac Sleep Problems\r\n\r\nFROM: http://forums.macrumors.com/showpost.php?p=14336469&postcount=9\r\n Feb 16, 2012, 10:18 PM    #9\r\nraxafarian\r\nmacrumors regular\r\n\r\nJoin Date: Jun 2007\r\nthis was my problem:\r\nI had the same issue with no sleep when shutting the lid. I'd open the lid and the screen would light up for a few seconds and then go black. If I waited a minute or so I could click the trackpad and the screen would turn back on.\r\n\r\nDrove me crazy for about 2 weeks. Then I noticed if I unplugged the cord it would sleep fine. More head scratching.\r\n\r\nI found this someplace .... open a terminal window and type:\r\npmset -g assertions\r\n\r\nand you can see what is keeping it from sleeping. In my case it was a few printers set for sharing (don't know how that happened). I deleted the unneeded printers and turned sharing off on the two I use.\r\n\r\nReran the terminal command:\r\npmset -g assertions\r\nand now nothing is preventing system sleep.\r\n\r\nOther commands I used:\r\npmset -g (to get the process id)\r\n\r\nand\r\nps -ef |grep -e 17\r\n(with 17 being the process id from the previous command results)\r\n\r\n\r\nHope this helps.\r\n\r\n## Git setup\r\n\r\n    $ git config --global user.name \"Your Name\"\r\n    $ git config --global user.email. \"your_email@example.com\"\r\n    $ ssh-keygen -t rsa -C \"your_email@example.com\"\r\n\r\n## Committing and Staging\r\n\r\n    # show diff in editor when writing commit message\r\n    $ git commit -v\r\n    # keep file, prevent git from tracking it\r\n    $ git rm --cached readme.txt\r\n    # diff of staged changes\r\n    $ git diff --staged\r\n    # amend last commit message\r\n    $ git commit --amend\r\n\r\n## Git Tags\r\n\r\n    # lightweight tags\r\n    $ git tag v1.1-1\r\n\r\n    # tag a specific commit later\r\n    $ git tag -a v1.2 -m 'version 1.2' 9cdef4e\r\n\r\n    # share a specific tag\r\n    $ git push origin v1.5\r\n    # share all tags\r\n    $ git push origin --tags\r\n\r\n    # look at a specific tag\r\n    $ git show v1.4\r\n\r\n## Branching and Merging\r\n\r\n    # create and checkout new branch\r\n    $ git checkout -b newbranch\r\n    # merge things back into master\r\n    $ git checkout master\r\n    $ git merge newbranch\r\n\r\n    # See what has been merged back or not\r\n    $ git branch --merged\r\n    $ git branch --no-merged\r\n\r\n## Git log\r\n\r\n    # show one-liners for last five commits\r\n    $ git log --abbrev-commit --pretty=oneline -5\r\n\r\n## Pull changes made by a person, and favor their changes\r\n\r\n    git pull -s recursive -X theirs\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}